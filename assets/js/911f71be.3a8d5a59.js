(self.webpackChunkcomet_docs=self.webpackChunkcomet_docs||[]).push([[5943],{3905:function(t,e,n){"use strict";n.d(e,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var p=r.createContext({}),d=function(t){var e=r.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},u=function(t){var e=d(t.components);return r.createElement(p.Provider,{value:e},t.children)},c={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},s=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,i=t.originalType,p=t.parentName,u=l(t,["components","mdxType","originalType","parentName"]),s=d(n),m=a,f=s["".concat(p,".").concat(m)]||s[m]||c[m]||i;return n?r.createElement(f,o(o({ref:e},u),{},{components:n})):r.createElement(f,o({ref:e},u))}));function m(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var i=n.length,o=new Array(i);o[0]=s;var l={};for(var p in e)hasOwnProperty.call(e,p)&&(l[p]=e[p]);l.originalType=t,l.mdxType="string"==typeof t?t:a,o[1]=l;for(var d=2;d<i;d++)o[d]=n[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},2634:function(t,e,n){"use strict";n.r(e),n.d(e,{frontMatter:function(){return o},metadata:function(){return l},toc:function(){return p},default:function(){return u}});var r=n(2122),a=n(9756),i=(n(7294),n(3905)),o={sidebar_position:70,title:"parquet2csv"},l={unversionedId:"cli/parquet2csv",id:"cli/parquet2csv",isDocsHomePage:!1,title:"parquet2csv",description:"Synopsis",source:"@site/docs/cli/parquet2csv.md",sourceDirName:"cli",slug:"/cli/parquet2csv",permalink:"/comet-data-pipeline/docs/cli/parquet2csv",editUrl:"https://github.com/ebiznext/comet-data-pipeline/edit/master/docs/docs/cli/parquet2csv.md",version:"current",sidebarPosition:70,frontMatter:{sidebar_position:70,title:"parquet2csv"},sidebar:"cometSidebar",previous:{title:"metrics",permalink:"/comet-data-pipeline/docs/cli/metrics"},next:{title:"cnxload",permalink:"/comet-data-pipeline/docs/cli/cnxload"}},p=[{value:"Synopsis",id:"synopsis",children:[]},{value:"Description",id:"description",children:[]},{value:"Parameters",id:"parameters",children:[]}],d={toc:p};function u(t){var e=t.components,n=(0,a.Z)(t,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"synopsis"},"Synopsis"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"comet parquet2csv ","[options]")),(0,i.kt)("h2",{id:"description"},"Description"),(0,i.kt)("p",null,"Convert parquet files to CSV.\nThe folder hierarchy should be in the form /input_folder/domain/schema/part",(0,i.kt)("em",{parentName:"p"},".parquet\nOnce converted the csv files are put in the folder /output_folder/domain/schema.csv file\nWhen the specified number of output partitions is 1 then /output_folder/domain/schema.csv is the file containing the data\notherwise, it is a folder containing the part"),".csv files.\nWhen output_folder is not specified, then the input_folder is used a the base output folder."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"comet parquet2csv\n         --input_dir /tmp/datasets/accepted/\n         --output_dir /tmp/datasets/csv/\n         --domain sales\n         --schema orders\n         --option header=true\n         --option separator=,\n         --partitions 1\n         --write_mode overwrite\n")),(0,i.kt)("h2",{id:"parameters"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Cardinality"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"--input_dir:",(0,i.kt)("inlineCode",{parentName:"td"},"<value>")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("em",{parentName:"td"},"Required")),(0,i.kt)("td",{parentName:"tr",align:null},"Full Path to input directory")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"--output_dir:",(0,i.kt)("inlineCode",{parentName:"td"},"<value>")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("em",{parentName:"td"},"Optional")),(0,i.kt)("td",{parentName:"tr",align:null},"Full Path to output directory, if not specified, input_dir is used as output dir")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"--domain:",(0,i.kt)("inlineCode",{parentName:"td"},"<value>")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("em",{parentName:"td"},"Optional")),(0,i.kt)("td",{parentName:"tr",align:null},"Domain name to convert. All schemas in this domain are converted. If not specified, all schemas of all domains are converted")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"--schema:",(0,i.kt)("inlineCode",{parentName:"td"},"<value>")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("em",{parentName:"td"},"Optional")),(0,i.kt)("td",{parentName:"tr",align:null},"Schema name to convert. If not specified, all schemas are converted.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"--delete_source:",(0,i.kt)("inlineCode",{parentName:"td"},"<value>")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("em",{parentName:"td"},"Optional")),(0,i.kt)("td",{parentName:"tr",align:null},"Should we delete source parquet files after conversion ?")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"--write_mode:",(0,i.kt)("inlineCode",{parentName:"td"},"<value>")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("em",{parentName:"td"},"Optional")),(0,i.kt)("td",{parentName:"tr",align:null},"One of Set(OVERWRITE, APPEND, ERROR_IF_EXISTS, IGNORE)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"--option:",(0,i.kt)("inlineCode",{parentName:"td"},"spark-option=value")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("em",{parentName:"td"},"Optional, Unbounded")),(0,i.kt)("td",{parentName:"tr",align:null},"Any Spark option to use (sep, delimiter, quote, quoteAll, escape, header ...)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"--partitions:",(0,i.kt)("inlineCode",{parentName:"td"},"<value>")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("em",{parentName:"td"},"Optional")),(0,i.kt)("td",{parentName:"tr",align:null},"How many output partitions")))))}u.isMDXComponent=!0}}]);