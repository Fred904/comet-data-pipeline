(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{132:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return f}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=o.a.createContext({}),p=function(e){var t=o.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return o.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(n),b=a,f=u["".concat(c,".").concat(b)]||u[b]||d[b]||r;return n?o.a.createElement(f,i(i({ref:t},s),{},{components:n})):o.a.createElement(f,i({ref:t},s))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,c=new Array(r);c[0]=b;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,c[1]=i;for(var s=2;s<r;s++)c[s]=n[s];return o.a.createElement.apply(null,c)}return o.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},96:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return p}));var a=n(3),o=n(7),r=(n(0),n(132)),c={sidebar_position:1},i={unversionedId:"concepts/extract",id:"concepts/extract",isDocsHomePage:!1,title:"Extract",description:"This step is optional and useful only if you intend to extract data from a SQL Database into",source:"@site/docs/concepts/extract.md",sourceDirName:"concepts",slug:"/concepts/extract",permalink:"/comet-data-pipeline/docs/concepts/extract",editUrl:"https://github.com/ebiznext/comet-data-pipeline/edit/master/docs/docs/concepts/extract.md",version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"cometSidebar",previous:{title:"Configuration",permalink:"/comet-data-pipeline/docs/userguide/configuration"},next:{title:"Load",permalink:"/comet-data-pipeline/docs/concepts/load"}},l=[],s={toc:l};function p(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"This step is optional and useful only if you intend to extract data from a SQL Database into\na set of files before ingesting it into a datalake or data warehouse."),Object(r.b)("p",null,"To extract the tables into DSV files, create a YAML specification file\nthat describe the tables and columns you are willing to extract using the following syntax:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-yaml"},'jdbc-schema:\n  connection: "test-h2" # Connection name as defined in the connections section of the application.conf file\n  catalog: "business" # Optional catalog name in the target database\n  schema: "public" # Database schema where tables are located\n  tables:\n    - name: "user"\n      columns: # optional list of columns, if not present all columns should be exported.\n        - id\n        - email\n    - name: product # All columns should be exported\n    - name: "*" # Ignore any other table spec. Just export all tables\n  table-types: # One or many of the types below\n    - "TABLE"\n    - "VIEW"\n    - "SYSTEM TABLE"\n    - "GLOBAL TEMPORARY"\n    - "LOCAL TEMPORARY"\n    - "ALIAS"\n    - "SYNONYM"\n  template-file: "/my-templates/domain-template.yml" # Metadata to use for the generated YML file.\n')),Object(r.b)("p",null,'To extract all the tables, simply set the "name" attribute to "*"'),Object(r.b)("p",null,"To import all the columns of a table, do not define the columns attribute."),Object(r.b)("p",null,"This will generate a YML file with the metadata section."),Object(r.b)("p",null,"Then you can ",Object(r.b)("a",{parentName:"p",href:"/comet-data-pipeline/docs/howto/extract"},"extract the data"),"."),Object(r.b)("p",null,"Once data are extracted you can proceed to the ",Object(r.b)("a",{parentName:"p",href:"/comet-data-pipeline/docs/howto/load"},"load step"),"."))}p.isMDXComponent=!0}}]);