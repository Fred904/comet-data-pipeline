(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{123:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return s})),t.d(n,"metadata",(function(){return o})),t.d(n,"toc",(function(){return d})),t.d(n,"default",(function(){return m}));var a=t(3),r=t(7),i=(t(0),t(132)),s={sidebar_position:2,title:"Load"},o={unversionedId:"examples/load",id:"examples/load",isDocsHomePage:!1,title:"Load",description:"This section describes how to import text files (eq. json / CSV) files into your Data Factory.",source:"@site/docs/examples/load.md",sourceDirName:"examples",slug:"/examples/load",permalink:"/comet-data-pipeline/docs/examples/load",editUrl:"https://github.com/ebiznext/comet-data-pipeline/master/website/docs/examples/load.md",version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Load"},sidebar:"cometSidebar",previous:{title:"Extract",permalink:"/comet-data-pipeline/docs/examples/extract"},next:{title:"Transform",permalink:"/comet-data-pipeline/docs/examples/transform"}},d=[{value:"Load to Parquet",id:"load-to-parquet",children:[]},{value:"Load to BigQuery",id:"load-to-bigquery",children:[]},{value:"Load to SQL Database",id:"load-to-sql-database",children:[]},{value:"Load to Elasticsearch",id:"load-to-elasticsearch",children:[{value:"Custom ES Template",id:"custom-es-template",children:[]}]}],l={toc:d};function m(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"This section describes how to import text files (eq. json / CSV) files into your Data Factory."),Object(i.b)("h2",{id:"load-to-parquet"},"Load to Parquet"),Object(i.b)("p",null,"Files will be ingested and stored in parquet format in the ",Object(i.b)("inlineCode",{parentName:"p"},"$COMET_DATASETS/sales/customers")," and ",Object(i.b)("inlineCode",{parentName:"p"},"$COMET_DATASETS/sales/orders")," files."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yaml"},'name: "sales"\ndirectory: "__COMET_TEST_ROOT__/incoming/sales"\nmetadata:\n  mode: "FILE"\n  format: "DSV"\n  withHeader: true\n  quote: "\\""\n  escape: "\\\\"\n  write: "APPEND"\nschemas:\n  - name: "customers"\n    pattern: "customers-.*.psv"\n    metadata:\n      separator: "|"\n    attributes:\n      - name: "id"\n        type: "customerid"\n        required: true\n      - name: "signup"\n        type: "datetime"\n        required: false\n      - name: "contact"\n        type: "email"\n        required: false\n      - name: "birthdate"\n        type: "date"\n        required: false\n      - name: "name1"\n        type: "string"\n        required: false\n        rename: "firstname"\n      - name: "name2"\n        type: "string"\n        required: false\n        rename: "lastname"\n  - name: "orders"\n    pattern: "orders-.*.csv"\n    merge:\n      key:\n        - "id"\n      delete: "customer_id is null"\n    metadata:\n      separator: ","\n    attributes:\n      - name: "order_id"\n        type: "string"\n        required: true\n        rename: "id"\n      - name: "customer_id"\n        type: "customerid"\n        required: false\n      - name: "amount"\n        type: "decimal"\n        required: false\n      - name: "seller_id"\n        type: "string"\n        required: false\n')),Object(i.b)("h2",{id:"load-to-bigquery"},"Load to BigQuery"),Object(i.b)("p",null,"Based on the :ref:",Object(i.b)("inlineCode",{parentName:"p"},"load_to_parquet")," example, the only thing we add is the /metadata/sink section\nFiles will be stored in the ",Object(i.b)("inlineCode",{parentName:"p"},"customers")," and ",Object(i.b)("inlineCode",{parentName:"p"},"orders")," BigQuery tables under the ",Object(i.b)("inlineCode",{parentName:"p"},"sales")," BigQuery dataset"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yaml"},'name: "sales"\ndirectory: "/incoming/sales"\nmetadata:\n  mode: "FILE"\n  format: "DSV"\n  withHeader: true\n  quote: "\\""\n  escape: "\\\\"\n  write: "APPEND"\n  sink:\n    type: BQ\nschemas:\n  - name: "customers"\n    pattern: "customers-.*.psv"\n    metadata:\n      separator: "|"\n    attributes:\n      - name: "id"\n        type: "customerid"\n        required: true\n      - name: "signup"\n        type: "datetime"\n        required: false\n      - name: "contact"\n        type: "email"\n        required: false\n      - name: "birthdate"\n        type: "date"\n        required: false\n      - name: "name1"\n        type: "string"\n        required: false\n        rename: "firstname"\n      - name: "name2"\n        type: "string"\n        required: false\n        rename: "lastname"\n  - name: "orders"\n    pattern: "orders-.*.csv"\n    merge:\n      key:\n        - "id"\n      delete: "customer_id is null"\n    metadata:\n      separator: ","\n    attributes:\n      - name: "order_id"\n        type: "string"\n        required: true\n        rename: "id"\n      - name: "customer_id"\n        type: "customerid"\n        required: false\n      - name: "amount"\n        type: "decimal"\n        required: false\n      - name: "seller_id"\n        type: "string"\n        required: false\n')),Object(i.b)("h2",{id:"load-to-sql-database"},"Load to SQL Database"),Object(i.b)("p",null,"Based on the :ref:",Object(i.b)("inlineCode",{parentName:"p"},"load_to_parquet")," example, we need to"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Add  the /metadata/sink section")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yaml"},'name: "hr"\ndirectory: "/incoming/hr"\nmetadata:\n  mode: "FILE"\n  format: "JSON"\n  sink:\n    type: JDBC\n    connection: my_connection\n    partitions: 10\n    batchSize: 1000\nschemas:\n  - name: "sellers"\n    pattern: "sellers-.*.json"\n    metadata:\n      array: true\n      format: "SIMPLE_JSON"\n      write: "APPEND"\n    attributes:\n      - name: "id"\n        type: "string"\n        required: true\n      - name: "seller_email"\n        type: "email"\n        required: true\n      - name: "location_id"\n        type: "long"\n        required: true\n  - name: "locations"\n    pattern: "locations-.*.json"\n    metadata:\n      format: "JSON"\n      write: "OVERWRITE"\n    attributes:\n      - name: "id"\n        type: "string"\n        required: true\n      - name: "address"\n        type: "struct"\n        required: true\n        attributes:\n          - name: "city"\n            type: "string"\n            required: true\n            metricType: "discrete"\n          - name: "stores"\n            type: "string"\n            array: true\n            required: false\n          - name: "country"\n            type: "string"\n            required: true\n            metricType: "discrete"\n')),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},"Add to the jdbc section a connection with the name specified in the /medata/sink/connection property")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-javascript"},'jdbc = {\n  "my_connection": {\n    uri = "jdbc:postgresql://127.0.0.1:5403/mydb?user=postgres&password=XXXX-XXXX-XXXX",\n    user = "postgres",\n    password = "XXXX-XXXX-XXXX",\n    driver = "org.postgresql.Driver"\n  }\n}\n')),Object(i.b)("h2",{id:"load-to-elasticsearch"},"Load to Elasticsearch"),Object(i.b)("p",null,"Based on the example :ref:",Object(i.b)("inlineCode",{parentName:"p"},"load_to_parquet")," example, we add is the /metadata/sink section to both schemas."),Object(i.b)("p",null,"For the sake of the example, we added a field to the location schema to highlight how timestamped indexes may be handled.\nIndexes will be named after the domain and schema names suffixed by the timestamp if present."),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"orders")," index will be named ",Object(i.b)("inlineCode",{parentName:"p"},"sales_orders")," and the ",Object(i.b)("inlineCode",{parentName:"p"},"customers")," index will have a name similar to ",Object(i.b)("inlineCode",{parentName:"p"},"sales_customers-2020.01.31")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yaml"},'name: "sales"\ndirectory: "__COMET_TEST_ROOT__/incoming/sales"\nmetadata:\n  mode: "FILE"\n  format: "DSV"\n  withHeader: true\n  quote: "\\""\n  escape: "\\\\"\n  write: "APPEND"\n  sink:\n    type: BQ\nschemas:\n  - name: "customers"\n    pattern: "customers-.*.psv"\n    metadata:\n      separator: "|"\n      sink:\n        type: ES\n        timestamp: "{signup|yyyy.MM.dd}"\n    attributes:\n      - name: "id"\n        type: "customerid"\n        required: true\n      - name: "signup"\n        type: "datetime"\n        required: false\n      - name: "contact"\n        type: "email"\n        required: false\n      - name: "birthdate"\n        type: "date"\n        required: false\n      - name: "name1"\n        type: "string"\n        required: false\n        rename: "firstname"\n      - name: "name2"\n        type: "string"\n        required: false\n        rename: "lastname"\n  - name: "orders"\n    pattern: "orders-.*.csv"\n    merge:\n      key:\n        - "id"\n      delete: "customer_id is null"\n    metadata:\n      separator: ","\n      sink:\n        type: ES\n    attributes:\n      - name: "order_id"\n        type: "string"\n        required: true\n        rename: "id"\n      - name: "customer_id"\n        type: "customerid"\n        required: false\n      - name: "amount"\n        type: "decimal"\n        required: false\n      - name: "seller_id"\n        type: "string"\n        required: false\n')),Object(i.b)("h3",{id:"custom-es-template"},"Custom ES Template"),Object(i.b)("p",null,"By default, Comet will infer from the dataset schema the properties and their types and create the ES template accordingly.\nThe default template template is shown below. The variable  ",Object(i.b)("inlineCode",{parentName:"p"},"__ATTRIBUTES__")," is substituted by the Comet with\nthe ES representation of the attributes."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json"},'{\n  "index_patterns": ["__DOMAIN__.__SCHEMA__", "__DOMAIN__.__SCHEMA__-*"],\n  "settings": {\n    "number_of_shards": "1",\n    "number_of_replicas": "0"\n  },\n  "mappings": {\n    "_doc": {\n      "_source": {\n        "enabled": true\n      },\n      "properties": {\n        __ATTRIBUTES__\n      }\n    }\n  }\n}\n')),Object(i.b)("p",null,"You may customize your ES template by creating a similar file with your own custom properties for a specific schema by putting it\nin the file with the following name ",Object(i.b)("inlineCode",{parentName:"p"},"COMET_ROOT/metadata/mapping/${domainName}/${schemaName}.json"),"."),Object(i.b)("p",null,"You may inject the domain and schema names using the ",Object(i.b)("inlineCode",{parentName:"p"},"__DOMAIN__")," and ",Object(i.b)("inlineCode",{parentName:"p"},"__SCHEMA__")," substitution variables."))}m.isMDXComponent=!0},132:function(e,n,t){"use strict";t.d(n,"a",(function(){return c})),t.d(n,"b",(function(){return b}));var a=t(0),r=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=r.a.createContext({}),m=function(e){var n=r.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=m(e.components);return r.a.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},u=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,l=d(e,["components","mdxType","originalType","parentName"]),c=m(t),u=a,b=c["".concat(s,".").concat(u)]||c[u]||p[u]||i;return t?r.a.createElement(b,o(o({ref:n},l),{},{components:t})):r.a.createElement(b,o({ref:n},l))}));function b(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,s=new Array(i);s[0]=u;var o={};for(var d in n)hasOwnProperty.call(n,d)&&(o[d]=n[d]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var l=2;l<i;l++)s[l]=t[l];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);