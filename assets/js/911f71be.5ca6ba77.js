(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{103:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return b}));var r=n(3),a=n(7),i=(n(0),n(128)),o={sidebar_position:110,title:"parquet2csv"},l={unversionedId:"cli/parquet2csv",id:"cli/parquet2csv",isDocsHomePage:!1,title:"parquet2csv",description:"Synopsis",source:"@site/docs/cli/parquet2csv.md",sourceDirName:"cli",slug:"/cli/parquet2csv",permalink:"/comet-data-pipeline/docs/cli/parquet2csv",editUrl:"https://github.com/ebiznext/comet-data-pipeline/master/website/docs/cli/parquet2csv.md",version:"current",sidebarPosition:110,frontMatter:{sidebar_position:110,title:"parquet2csv"},sidebar:"cometSidebar",previous:{title:"metrics",permalink:"/comet-data-pipeline/docs/cli/metrics"},next:{title:"transform | job",permalink:"/comet-data-pipeline/docs/cli/transform"}},c=[{value:"Synopsis",id:"synopsis",children:[]},{value:"Description",id:"description",children:[]},{value:"Parameters",id:"parameters",children:[]}],p={toc:c};function b(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"synopsis"},"Synopsis"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"comet parquet2csv ","[options]")),Object(i.b)("h2",{id:"description"},"Description"),Object(i.b)("p",null,"Convert parquet files to CSV.\nThe folder hierarchy should be in the form /input_folder/domain/schema/part",Object(i.b)("em",{parentName:"p"},".parquet\nOnce converted the csv files are put in the folder /output_folder/domain/schema.csv file\nWhen the specified number of output partitions is 1 then /output_folder/domain/schema.csv is the file containing the data\notherwise, it is a folder containing the part"),".csv files.\nWhen output_folder is not specified, then the input_folder is used a the base output folder."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-shell"},"comet parquet2csv\n         --input_dir /tmp/datasets/accepted/\n         --output_dir /tmp/datasets/csv/\n         --domain sales\n         --schema orders\n         --option header=true\n         --option separator=,\n         --partitions 1\n         --write_mode overwrite\n")),Object(i.b)("h2",{id:"parameters"},"Parameters"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Parameter"),Object(i.b)("th",{parentName:"tr",align:null},"Cardinality"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"--input_dir:",Object(i.b)("inlineCode",{parentName:"td"},"<value>")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("em",{parentName:"td"},"Required")),Object(i.b)("td",{parentName:"tr",align:null},"Full Path to input directory")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"--output_dir:",Object(i.b)("inlineCode",{parentName:"td"},"<value>")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("em",{parentName:"td"},"Optional")),Object(i.b)("td",{parentName:"tr",align:null},"Full Path to output directory, if not specified, input_dir is used as output dir")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"--domain:",Object(i.b)("inlineCode",{parentName:"td"},"<value>")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("em",{parentName:"td"},"Optional")),Object(i.b)("td",{parentName:"tr",align:null},"Domain name to convert. All schemas in this domain are converted. If not specified, all schemas of all domains are converted")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"--schema:",Object(i.b)("inlineCode",{parentName:"td"},"<value>")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("em",{parentName:"td"},"Optional")),Object(i.b)("td",{parentName:"tr",align:null},"Schema name to convert. If not specified, all schemas are converted.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"--delete_source:",Object(i.b)("inlineCode",{parentName:"td"},"<value>")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("em",{parentName:"td"},"Optional")),Object(i.b)("td",{parentName:"tr",align:null},"Should we delete source parquet files after conversion ?")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"--write_mode:",Object(i.b)("inlineCode",{parentName:"td"},"<value>")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("em",{parentName:"td"},"Optional")),Object(i.b)("td",{parentName:"tr",align:null},"One of Set(OVERWRITE, APPEND, ERROR_IF_EXISTS, IGNORE)")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"--option:",Object(i.b)("inlineCode",{parentName:"td"},"spark-option=value")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("em",{parentName:"td"},"Optional, Unbounded")),Object(i.b)("td",{parentName:"tr",align:null},"Any Spark option to use (sep, delimiter, quote, quoteAll, escape, header ...)")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"--partitions:",Object(i.b)("inlineCode",{parentName:"td"},"<value>")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("em",{parentName:"td"},"Optional")),Object(i.b)("td",{parentName:"tr",align:null},"How many output partitions")))))}b.isMDXComponent=!0},128:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),b=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=b(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},s=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=b(n),s=r,m=d["".concat(o,".").concat(s)]||d[s]||u[s]||i;return n?a.a.createElement(m,l(l({ref:t},p),{},{components:n})):a.a.createElement(m,l({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=s;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}s.displayName="MDXCreateElement"}}]);