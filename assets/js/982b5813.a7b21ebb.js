(self.webpackChunkcomet_docs=self.webpackChunkcomet_docs||[]).push([[6883],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return p},kt:function(){return d}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=s(t),d=a,f=m["".concat(c,".").concat(d)]||m[d]||u[d]||o;return t?r.createElement(f,i(i({ref:n},p),{},{components:t})):r.createElement(f,i({ref:n},p))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1199:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return i},metadata:function(){return l},toc:function(){return c},default:function(){return p}});var r=t(2122),a=t(9756),o=(t(7294),t(3905)),i={sidebar_position:10},l={unversionedId:"reference/environment",id:"reference/environment",isDocsHomePage:!1,title:"Environment",description:"Env specific variables",source:"@site/docs/reference/environment.md",sourceDirName:"reference",slug:"/reference/environment",permalink:"/comet-data-pipeline/docs/reference/environment",editUrl:"https://github.com/ebiznext/comet-data-pipeline/edit/master/docs/docs/reference/environment.md",version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"cometSidebar",previous:{title:"Configuration",permalink:"/comet-data-pipeline/docs/reference/configuration"},next:{title:"Extract",permalink:"/comet-data-pipeline/docs/reference/extract"}},c=[{value:"Env specific variables",id:"env-specific-variables",children:[]},{value:"Global Variables",id:"global-variables",children:[]}],s={toc:c};function p(e){var n=e.components,t=(0,a.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"env-specific-variables"},"Env specific variables"),(0,o.kt)("p",null,"Comet allows you to use variables almost everywhere in the domain and job files.\nFor example, you may need to set the folder name to watch to a different value\nin development and production environments. This is where variables may help. They are enclosed inside\n",(0,o.kt)("inlineCode",{parentName:"p"},"${}")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"{{}}")),(0,o.kt)("p",null,"Assuming we have a ",(0,o.kt)("inlineCode",{parentName:"p"},"sales")," domain as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'name: "sales"\ndirectory: "${root_path}/sales"\nack: "ack"\nextensions:\n  - "json"\n  - "psv"\n  - "csv"\n  - "dsv"\n')),(0,o.kt)("p",null,"We create a file ",(0,o.kt)("inlineCode",{parentName:"p"},"env.DEV.comet.yml")," in the metadata folder "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'env:\n  root_path: "/tmp/quickstart"\n')),(0,o.kt)("p",null,"and the file ",(0,o.kt)("inlineCode",{parentName:"p"},"env.PROD.comet.yml")," in the metadata folder"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'env:\n  root_path: "/cluster/quickstart"\n')),(0,o.kt)("p",null,"To apply the substitution in the DEV env set the COMET_ENV variable before running Comet as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"export COMET_ENV=DEV\n")),(0,o.kt)("p",null,"In Production set it rather to:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"export COMET_ENV=PROD\n")),(0,o.kt)("h2",{id:"global-variables"},"Global Variables"),(0,o.kt)("p",null,"To define variables accross environment, simply declare them in thet ",(0,o.kt)("inlineCode",{parentName:"p"},"env.comet.yml")," file in the ",(0,o.kt)("inlineCode",{parentName:"p"},"metadata")," folder."),(0,o.kt)("p",null,"Global variables definition may be superseded by the env specific variables files."))}p.isMDXComponent=!0}}]);