(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{103:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return i})),n.d(t,"default",(function(){return b}));var r=n(3),a=n(8),o=(n(0),n(134)),l={sidebar_position:3},s={unversionedId:"howto/transform",id:"howto/transform",isDocsHomePage:!1,title:"Transform",description:"Once your data is ingested, you may start to expose insights by joining them and / or create meaningful aggregates.",source:"@site/docs/howto/transform.md",sourceDirName:"howto",slug:"/howto/transform",permalink:"/comet-data-pipeline/docs/howto/transform",editUrl:"https://github.com/ebiznext/comet-data-pipeline/edit/master/docs/docs/howto/transform.md",version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"cometSidebar",previous:{title:"Load",permalink:"/comet-data-pipeline/docs/howto/load"},next:{title:"Extract",permalink:"/comet-data-pipeline/docs/examples/extract"}},i=[{value:"Parquet Job",id:"parquet-job",children:[]},{value:"BigQuery Job",id:"bigquery-job",children:[]},{value:"Externalize SQL Requests",id:"externalize-sql-requests",children:[]}],c={toc:i};function b(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Once your data is ingested, you may start to expose insights by joining them and / or create meaningful aggregates."),Object(o.b)("p",null,"In the example below, we join the ",Object(o.b)("inlineCode",{parentName:"p"},"sellers")," and ",Object(o.b)("inlineCode",{parentName:"p"},"orders")," tables to compute the total amount sold by each seller."),Object(o.b)("p",null,"We want to do it on parquet files and on BigQuery. We need to create 2 env files, one for environment."),Object(o.b)("h2",{id:"parquet-job"},"Parquet Job"),Object(o.b)("p",null,"Create the ",Object(o.b)("inlineCode",{parentName:"p"},"env.FS.comet.yml")," file in the ",Object(o.b)("inlineCode",{parentName:"p"},"metadata")," folder as follows:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-yaml"},'env:\n  sink_type: "FS"\n  engine: Spark\n  sellers_view: "FS:${root_path}/datasets/accepted/hr/sellers"\n  orders_view: "FS:${root_path}/datasets/accepted/sales/orders"\n')),Object(o.b)("p",null,"Create the YAML file that describe the job and name it ",Object(o.b)("inlineCode",{parentName:"p"},"sellers_kpi.comet.yml"),":"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-yaml"},'transform:\n  name: kpi\n  engine: ${engine}\n  views:\n    sellers: "${sellers_view}"\n    orders: "${orders_view}"\n  tasks:\n    - sql: "select seller_email, sum(amount) as sum from sellers, orders where sellers.id = orders.seller_id group by sellers.seller_email"\n      name: byseller\n      domain: sales_kpi\n      dataset: byseller_kpi\n      write: OVERWRITE\n  area: business\n')),Object(o.b)("p",null,"Before executing the job, we set the ",Object(o.b)("inlineCode",{parentName:"p"},"COMET_ENV")," variable to ",Object(o.b)("inlineCode",{parentName:"p"},"FS")," to make sure variables are instantiated correctly:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-shell"},"export COMET_ENV=FS\n$SPARK_HOME/bin/spark-submit target/scala-2.12/comet-assembly-VERSION.jar job --name sellers_kpi\n")),Object(o.b)("h2",{id:"bigquery-job"},"BigQuery Job"),Object(o.b)("p",null,"To execute the same request on BigQuery, we need to create views on the BigQuery tables where data were ingested.\nCreate the ",Object(o.b)("inlineCode",{parentName:"p"},"env.BQ.comet.yml")," file in the ",Object(o.b)("inlineCode",{parentName:"p"},"metadata")," folder as follows:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-yaml"},'env:\n  sink_type: "BQ"\n  engine: BQ\n  sellers_view: "BQ:select * from hr.sellers" # or simply sellers_view: hr.sellers\n  orders_view: "BQ:select * from sales.orders" # or simply sellers_view: sales.orders\n')),Object(o.b)("p",null,"Before executing the job, we set the ",Object(o.b)("inlineCode",{parentName:"p"},"COMET_ENV")," variable to ",Object(o.b)("inlineCode",{parentName:"p"},"BQ")," to make sure variables are instantiated correctly:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-shell"},"export COMET_ENV=BQ\n$SPARK_HOME/bin/spark-submit target/scala-2.12/comet-assembly-VERSION.jar job --name sellers_kpi\n")),Object(o.b)("h2",{id:"externalize-sql-requests"},"Externalize SQL Requests"),Object(o.b)("p",null,"Most of the time you may want to use your favorite SQL Deve env (I personally use Jetbrains IntelliJ / DataGrip).\nYou may externalize the SQL Code in a file named after the name of the job if you have only one task in the job file\nor after the name and the task for each task in the job file."),Object(o.b)("p",null,"Create a SQL File with the name ",Object(o.b)("inlineCode",{parentName:"p"},"ki.byseller.sql")," (or simply ",Object(o.b)("inlineCode",{parentName:"p"},"ki.sql")," since we have only one task in the job file)"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-sql"},"select seller_email, sum(amount) as sum from sellers, orders where sellers.id = orders.seller_id\ngroup by sellers.seller_email\n")),Object(o.b)("p",null,"And leave the task.sql field blank in the YAML file."))}b.isMDXComponent=!0},134:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return d}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=a.a.createContext({}),b=function(e){var t=a.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=b(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=b(n),m=r,d=p["".concat(l,".").concat(m)]||p[m]||u[m]||o;return n?a.a.createElement(d,s(s({ref:t},c),{},{components:n})):a.a.createElement(d,s({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var c=2;c<o;c++)l[c]=n[c];return a.a.createElement.apply(null,l)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);