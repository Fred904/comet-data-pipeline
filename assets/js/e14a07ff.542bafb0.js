(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{119:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(7),i=(n(0),n(132)),c={sidebar_position:3,title:"Transform"},l={unversionedId:"concepts/transform",id:"concepts/transform",isDocsHomePage:!1,title:"Transform",description:"Job",source:"@site/docs/concepts/transform.md",sourceDirName:"concepts",slug:"/concepts/transform",permalink:"/comet-data-pipeline/docs/concepts/transform",editUrl:"https://github.com/ebiznext/comet-data-pipeline/edit/master/docs/docs/concepts/transform.md",version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Transform"},sidebar:"cometSidebar",previous:{title:"Load",permalink:"/comet-data-pipeline/docs/concepts/load"},next:{title:"Extract",permalink:"/comet-data-pipeline/docs/howto/extract"}},s=[{value:"Job",id:"job",children:[]},{value:"Task",id:"task",children:[]},{value:"Partitioning",id:"partitioning",children:[]},{value:"Clustering",id:"clustering",children:[]},{value:"Views",id:"views",children:[]}],o={toc:s};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},o,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"job"},"Job"),Object(i.b)("p",null,"A job is a set of transform tasks executed using the specified engine."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},"name: String\n")),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Required"),". Job logical name."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},"tasks: List[Task]\n")),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Required"),". List of transform tasks to execute."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},"area : String\n")),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Required"),". Area where the data is located."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"When using the BigQuery engine, teh area corresponds to the dataset name we will be working on in this job."),Object(i.b)("li",{parentName:"ul"},'When using the Spark engine, this is folder where the data should be store. Default value is "business"')),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},"format: String\n")),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Optional"),'. output file format when using Spark engine. Ingored for BigQuery. Default value is "parquet".'),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},"coalesce: Boolean\n")),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Optional"),". When outputting files, should we coalesce it to a single file. Useful when CSV is the output format."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},"udf : String\n")),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Optional"),"."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Register UDFs written in this JVM class when using Spark engine"),Object(i.b)("li",{parentName:"ul"},"Register UDFs stored at this location when using BigQuery engine")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},"views : Map[String,String]\n")),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Optional"),". Create temporary views using where the key is the view name and the map the SQL request corresponding to this view using the SQL engine supported syntax."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},"engine : String\n")),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Optional"),". SPARK or BQ. Default value is SPARK."),Object(i.b)("h2",{id:"task"},"Task"),Object(i.b)("p",null,"Task executed in the context of a job. Each task is executed in its own session."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},"sql: String\n")),Object(i.b)("p",null,"Main SQL request to exexute (do not forget to prefix table names with the database name to avoid conflicts)"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},"domain: String\n")),Object(i.b)("p",null,"Output domain in output Area (Will be the Database name in Hive or Dataset in BigQuery)"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},"dataset: String\n")),Object(i.b)("p",null,"Dataset Name in output Area (Will be the Table name in Hive & BigQuery)"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},"write: String\n")),Object(i.b)("p",null,"Append to or overwrite existing data"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},"area: String\n")),Object(i.b)("p",null,"Target Area where domain / dataset will be stored."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},"partition: List[String]\n")),Object(i.b)("p",null,"List of columns used for partitioning the outtput."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},"presql: List[String]\n")),Object(i.b)("p",null,"List of SQL requests to executed before the main SQL request is run"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},"postsql: List[String]\n")),Object(i.b)("p",null,"List of SQL requests to executed after the main SQL request is run"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},"sink: Sink\n")),Object(i.b)("p",null,"Where to sink the data"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},"rls: List[RowLevelSecurity]\n")),Object(i.b)("p",null,"Row level security policy to apply too the output data."),Object(i.b)("h2",{id:"partitioning"},"Partitioning"),Object(i.b)("h2",{id:"clustering"},"Clustering"),Object(i.b)("p",null,Object(i.b)("a",{parentName:"p",href:"https://deepsense.ai/optimize-spark-with-distribute-by-and-cluster-by/"},"https://deepsense.ai/optimize-spark-with-distribute-by-and-cluster-by/")),Object(i.b)("h2",{id:"views"},"Views"))}p.isMDXComponent=!0},132:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return d}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=r.a.createContext({}),p=function(e){var t=r.a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},b=function(e){var t=p(e.components);return r.a.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,o=s(e,["components","mdxType","originalType","parentName"]),b=p(n),m=a,d=b["".concat(c,".").concat(m)]||b[m]||u[m]||i;return n?r.a.createElement(d,l(l({ref:t},o),{},{components:n})):r.a.createElement(d,l({ref:t},o))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,c=new Array(i);c[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,c[1]=l;for(var o=2;o<i;o++)c[o]=n[o];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);